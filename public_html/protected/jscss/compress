#!/usr/bin/env php
<?php
define('IN_PATH',  dirname(__FILE__) . '/public_html');
define('OUT_PATH', dirname(__FILE__) . '/../..');
define('SMARTY_PLUGINS_DIRECTORY', dirname(__FILE__) . '/../smartyPlugins');

$hashes = array();
if(!exec_directory('', $hashes)) {
    exit(1);
}
if(!create_loader($hashes)) {
    exit(1);
}
exit(0);

function exec_directory($rel_path, array &$hashes) {
    $dir = new DirectoryIterator(IN_PATH . $rel_path);
    $status = true;
    foreach($dir as $entry) {
        if($entry->isDot()) {
            continue;
        } elseif($entry->isDir()) {
            $ext = @pathinfo($entry->getPathname(), PATHINFO_EXTENSION);
            if($ext === 'js' || $ext === 'css') {
                $status &= exec_file($rel_path . '/' . $entry->getFilename(), $ext, $hashes);
            } else {
                $status &= exec_directory($rel_path . '/' . $entry->getFilename(), $hashes);
            }
        } else {
            $ext = @pathinfo($entry->getPathname(), PATHINFO_EXTENSION);
            if($ext === 'js' || $ext === 'css') {
                $status &= exec_file($rel_path . '/' . $entry->getFilename(), $ext, $hashes);
            }
        }
    }
    return $status;
}

function exec_file($rel_path, $filetype, array &$hashes) {
    echo "<<< $rel_path >>>\n";
    $in_file = IN_PATH . $rel_path;
    $out_file1 = OUT_PATH . $rel_path;
    $out_file2 = OUT_PATH . $rel_path . '.gz'; // hoge.css.gz

    if(is_dir($in_file)) {
        return exec_file_virtual($rel_path, $in_file, $out_file1, $out_file2, $filetype, $hashes);
    } else {
        return exec_file_real($rel_path, $in_file, $out_file1, $out_file2, $filetype, $hashes);
    }
}

function exec_file_virtual($rel_path, $in_dir, $out_file1, $out_file2, $filetype, array &$hashes) {
    $in_file_mtime = 0;
    $in_files = array();

    $dir = new DirectoryIterator($in_dir);
    foreach($dir as $entry) {
        if($entry->isDot() || $entry->isDir()) {
            continue;
        }
        $in_files[] = $entry->getPathname();
        $in_file_mtime = max($in_file_mtime, $entry->getMTime());
    }
    if(!$in_files) {
        echo "Virtual file directory $in_dir has no data file.\n";
        return false;
    }
    natcasesort($in_files);
    if(!$in_file = tempnam('/tmp', 'jscss-')) {
        echo "Temp file create failed\n";
        return false;
    }
    $fh = fopen($in_file, 'w');
    foreach($in_files as $path) {
        fwrite($fh, file_get_contents($path) . "\n\n");
    }
    fclose($fh);
    touch($in_file, $in_file_mtime);
    $status = exec_file_real($rel_path, $in_file, $out_file1, $out_file2, $filetype, $hashes);
    unlink($in_file);
    return $status;
}

function exec_file_real($rel_path, $in_file, $out_file1, $out_file2, $filetype, array &$hashes) {
    if(file_exists($out_file1) && filemtime($out_file1) >= filemtime($in_file) &&
       file_exists($out_file2) && filemtime($out_file2) >= filemtime($in_file))
    {
        // not modified
        $hashes[$rel_path] = get_hash($out_file1);
        return true;
    }

    if(!file_exists(dirname($out_file1))) {
        if(!mkdir(dirname($out_file1), 0755, true)) {
            echo "Cannot create directory: " . dirname($out_file1) . "\n";
            return false;
        }
    }

    if($filetype === 'js') {
        $cmdline = sprintf(
            '/usr/bin/env %s --comments --compress --mangle --beautify beautify=false,ascii-only=true %s > %s',
            escapeshellarg('uglifyjs'),
            escapeshellarg($in_file),
            escapeshellarg($out_file1)
        );
    } else {
        $cmdline = sprintf(
            '/usr/bin/env %s -o %s %s',
            escapeshellarg('cleancss'),
            escapeshellarg($out_file1),
            escapeshellarg($in_file)
        );
    }
    exec($cmdline, $lines, $status);
    if($status != 0) {
        echo "Cannot compress file\n";
        return false;
    }

    $cmdline = sprintf(
        '/usr/bin/env %s -c9 %s > %s',
        escapeshellarg('gzip'),
        escapeshellarg($out_file1),
        escapeshellarg($out_file2)
    );

    exec($cmdline, $lines, $status);
    if($status != 0) {
        echo "Cannot gzip file\n";
        return false;
    }

    touch($out_file1, filemtime($in_file));
    touch($out_file2, filemtime($in_file));
    $hashes[$rel_path] = get_hash($out_file1);
    return true;
}

function get_hash($file_path) {
    $raw_hash = hash_file('sha512', $file_path, true); // binary
    $b64_hash = substr(base64_encode($raw_hash), 0, 12);
    $b64_hash = strtr($b64_hash, '+/', '-_');
    return $b64_hash;
}

function create_loader(array $hashes) {
    uksort($hashes, 'strnatcasecmp');
    $plugin = array();
    $plugin[] = '<?php';
    $plugin[] = '// This is auto-generated plugin file.';
    $plugin[] = 'function smarty_function_js_css_signature(array $params, &$smarty) {';
    $plugin[] = '    switch($params["file"]) {';
    foreach($hashes as $k => $v) {
        $plugin[] = "    case '{$k}': return '{$v}';";
    }
    $plugin[] = '    }';
    $plugin[] = '}';
    $plugin[] = '';

    return
        !!file_put_contents(
            SMARTY_PLUGINS_DIRECTORY . '/function.js_css_signature.php',
            implode("\n", $plugin)
        );
}
